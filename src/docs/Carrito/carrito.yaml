paths:
  /api/carts:
    post:
      description: Crea un nuevo Cart vacio
      operationId: createCart
      tags:
        - cart
      responses:
        '201':
          description: Cart creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/carts'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/carts/{_id}:
    get:
      description: Obtiene un Cart con todos sus productos
      tags:
        - getCartId
      parameters:
        - name: _id
          in: path
          required: true
          description: ID del cart que se busca
          schema:
            $type: String
      responses:
        '200':
          description: Cart encontrado
          content:
            application/json:
              schema:
                $ref: '#components/schemas/getCartId'
    put:
      summary: Actualizar un carts a partir del ID
      tags:
        - carts
      parameters:
        - name: _id
          in: path
          required: true
          description: ID del usuario que se busca
          schema:
            $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/updatecarts'
      responses:
        '200':
          description: Usuario modificado exitosamente
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Success'
    delete:
      description: elimina un producto por su ID
      operationId: deleteProduct
      parameters:
        - name: _id
          in: path
          description: ID of product to delete
          required: true
      responses:
        '204':
          description: product deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Success:
      type: object
      properties:
        status:
          type: String
          description: success or error
        code:
          type: Number
          description: c√≥digo de respuesta HTTP.
        data:
          type: Array
          description: array con la informacion de la peticion requerida
        msg:
          type: String
          description: aclarando que ocurrio
      example:
        status: 'Fail',
          code: 404,
          data: {},
          msg: 'Error createCart',
    carts:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID auto generado by mongo
        products:
          type: Array
          description: Ids de los productos a comprar
      example:
        _id: ObjectId("644081a93f0625dc193bc594")
        products: []
    getCartId:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID auto generado by mongo
        products:
          type: Array
          description: Ids de los productos a comprar
      example:
        _id: 64d133a9d80ee1946b5c62fc
        products: Array
          0: Object
            productId: ObjectId(648a287a1df594f1632f89b2)
            quantity: 5
            _id: ObjectId(64d133d0d80ee1946b5c630a)
  requestBodies:
    uodateCart:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID auto generado by mongo
        products:
          type: Array
          description: Ids de los productos a comprar
      example:
        _id: 64d133a9d80ee1946b5c62fc
        products: Array
          0: Object
            productId: ObjectId(648a287a1df594f1632f89b2)
            quantity: 5
            _id: ObjectId(64d133d0d80ee1946b5c630a)
  Error:
    type: object
    required:
      - id
    properties:
      id:
        type: ObjectId
